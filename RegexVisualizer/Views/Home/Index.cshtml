@model RegexVisualizer.Models.HomeModel
<div class="span12 whitebox">
    <div class="page-header">
        <h1>Regular expression visualizer</h1>    
    </div>
    <div class="alert alert-info fade in">
        <a class="close" data-dismiss="alert" href="#">&times;</a>
        <p>
            <strong>What's this?</strong><br />
            This tool shows you the deterministic and nondeterministic automata that some regular expression engines would use to parse your 
            expression. Besides the educational use, it's nifty for debugging your expressions - just follow the little arrows and see where 
            they go wrong.
        </p>
        <p>
            <strong>Legend</strong><br/>
            <ul>
                <li>Single circles are normal states.</li>
                <li>Double circles are accepting states.</li>
                <li>Arrows are transitions between states, labels represent the legal input.</li>
            </ul>
        </p>
        <p>
            <strong>Learn more</strong><br/>
            Read more about how this works at my blog 
            <a href="http://binarysculpting.com//2012/02/11/regular-expressions-how-do-they-really-work-automata-theory-for-programmers-part-1/">
                binarysculpting.com</a>. 
        
            The graph generation is powered by <a href="http://dervall.github.com/Piglet">Piglet</a>,
            the fluent parser generator. Follow me on twitter <a href="http://twitter.com/Perdervall">@@Perdervall</a>.
        </p>
        <p>
            <strong>Share</strong><br/>
            Want to share your graphs? Press enter in the regular expression box and copy the URL of the page to get a direct link to your graph.
        </p>
    </div>
    <form class="well">
        <fieldset>
            <div class="control-group">
                <div class="controls" dir="ltr">
                    <label>Regular expression</label>
                    @Html.TextBoxFor(m => Model.Regex, new { id = "regexinput", @class = "input-xlarge span8" })
                    <span id="errorhelp" class="help-inline"></span>
                    @Html.HiddenFor(m => Model.NfaSize, new { id = "nfachartsize" })
                    @Html.HiddenFor(m => Model.DfaSize, new { id = "dfachartsize" })
                    <label class="checkbox">
                        @Html.CheckBoxFor(m => Model.Minimize, new { id = "minimize" }) Minimize the deterministic automata
                    </label>
                </div>
            </div>
        </fieldset>
    </form>    
</div>
<div class="span12 whitebox">
    <h3>
        Nondeterministic automata</h3>
    <div align="center" id="nfachart">
    </div>
    <div align="right">
        <a href="#" onclick="resize('nfa', -50)"><i class="icon-minus-sign"></i></a>
        <a href="#" onclick="resize('nfa', 50)"><i class="icon-plus-sign"></i></a>
    </div>
</div>
<div class="span12 whitebox">
    <h3>
        Deterministic automata</h3>
    <div align="center" id="dfachart">
    </div>
    <div align="right">
        <a href="#" onclick="resize('dfa', -50)"><i class="icon-minus-sign"></i></a>
        <a href="#" onclick="resize('dfa', 50)"><i class="icon-plus-sign"></i></a>
    </div>
</div>
<script language="javascript" src="http://www.google.com/jsapi"></script>
<script type="text/javascript">
    function resize(target, offset) {
        var t = $('#' + target + 'chartsize');
        var newVal = offset + parseInt(t.val());
        if (newVal < 50)
            newVal = 50;
        else if (newVal > 500)
            newVal = 500;

        t.val(newVal);
        drawAll();
    }

    function draw(target, dot, dataTable) {
        var vis = new google.visualization.ImageChart(document.getElementById(target));
        var options = {
            chs: '850x' + $('#'+target+'size').val(),
            cht: 'gv',
            chld: '',
            chl: dot
        };
        vis.draw(dataTable, options);
    }

    function drawInitial() {
        if ($('#regexinput').val() != '') {
            drawAll();
        }
    }

    function drawAll() {
        var that = $('#regexinput');
        var value = $('#regexinput').val();
        var mini = $('#minimize').is(':checked');

        if (value.length >= 1) {
            $.ajax({
                type: "GET",
                url: "/Home/RegexToDot/",
                data: {
                    'regex': value,
                    'minimize': mini                    
                },
                dataType: "json",
                success: function (msg) {
                    if (value == $(that).val()) {
                        // Value has changed, we can now push this to the
                        // graphviz API
                        if (msg.Error != '') {
                            // Show an error instead that this isn't a valid regular expression
                            $('#errorhelp').html(msg.Error);
                        } else {
                            $('#errorhelp').html('');
                            draw('nfachart', msg.Nfa, new google.visualization.DataTable());
                            draw('dfachart', msg.Dfa, new google.visualization.DataTable());
                        }
                    }
                }
            });
        }
    }

    google.setOnLoadCallback(drawInitial);
    google.load("visualization", "1", { packages: ["imagechart"] });
</script>
<script type="text/javascript" language="javascript">
    $(function () {
        $("#regexinput").keyup(drawAll);
        $("#minimize").change(drawAll);
//        $(".alert").alert();
        
    });
</script>
